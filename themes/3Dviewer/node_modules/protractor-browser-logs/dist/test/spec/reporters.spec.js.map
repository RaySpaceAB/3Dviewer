{"version":3,"sources":["test/spec/reporters.spec.js"],"names":["promised","require","expect","use","logs","mocks","describe","it","browserLogs","browser","verify","to","eventually","be","fulfilled","reporter","createSpy","reporters","then","callCount","equal","callArguments","deep","store","browserConsole","console","ignore","forEach","level","name","message","error","rejected","reporter1","reporter2","result","arguments"],"mappings":"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","file":"reporters.spec.js","sourcesContent":["\nconst promised = require('chai-as-promised');\nconst expect   = require('chai').use(promised).expect;\nconst logs     = require('../../index');\nconst mocks    = require('./mocks');\n\n\ndescribe('Browser Logs Reporters', () => {\n\n  it('should accept empty options', () => {\n    const browserLogs = logs(mocks.browser([]), {});\n    return expect(browserLogs.verify()).to.eventually.be.fulfilled;\n  });\n\n  it('should call a reporter with empty log', () => {\n    var reporter = createSpy();\n    var browserLogs = logs(mocks.browser([]), {reporters: [reporter]});\n    return expect(browserLogs.verify()).to.eventually.be.fulfilled.then(function () {\n      expect(reporter.callCount).to.equal(1);\n      expect(reporter.callArguments[0]).to.deep.equal([]);\n    });\n  });\n\n  it('should call a reporter with complete log', () => {\n    var reporter = createSpy();\n    var store = [];\n    var browserConsole = mocks.console(store);\n    var browserLogs = logs(mocks.browser(store), {reporters: [reporter]});\n\n    browserLogs.ignore(/.*/);\n\n    ['debug', 'log', 'info', 'warn', 'error'].forEach(level => {\n      browserConsole[level](level);\n    });\n\n    return expect(browserLogs.verify()).to.eventually.be.fulfilled.then(() => {\n      expect(reporter.callCount).to.equal(1);\n      expect(reporter.callArguments[0]).to.deep.equal([\n        {level: {name: 'DEBUG'}, message: 'debug'},\n        {level: {name: 'INFO'}, message: 'log'},\n        {level: {name: 'INFO'}, message: 'info'},\n        {level: {name: 'WARNING'}, message: 'warn'},\n        {level: {name: 'SEVERE'}, message: 'error'}\n      ]);\n    });\n  });\n\n  it('should call a reporter even if verification fails', () => {\n    var reporter = createSpy();\n    var store = [];\n    var browserConsole = mocks.console(store);\n    var browserLogs = logs(mocks.browser(store), {reporters: [reporter]});\n\n    browserConsole.error('error');\n\n    return expect(browserLogs.verify()).to.eventually.be.rejected.then(() => {\n      expect(reporter.callCount).to.equal(1);\n      expect(reporter.callArguments[0]).to.deep.equal([\n        {level: {name: 'SEVERE'}, message: 'error'}\n      ]);\n    });\n  });\n\n  it('should call all reporters', () => {\n    var reporter1 = createSpy();\n    var reporter2 = createSpy();\n    var browserLogs = logs(mocks.browser([]), {reporters: [reporter1, reporter2]});\n\n    return expect(browserLogs.verify()).to.eventually.be.fulfilled.then(() => {\n      expect(reporter1.callCount).to.equal(1);\n      expect(reporter2.callCount).to.equal(1);\n    });\n  });\n\n  function createSpy() {\n    var result = function () {\n      result.callCount = (result.callCount || 0) + 1;\n      result.callArguments = (result.callArguments || [])[result.callCount - 1] = arguments;\n    };\n    return result;\n  }\n\n});\n"]}